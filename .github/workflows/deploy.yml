name: Deploy runsync to VM

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Setup repo
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts

            # Check if runsync directory exists, create if not
            if [ ! -d "runsync" ]; then
              git clone https://github.com/shubhamgrg04/runsync.git runsync
            else
              cd runsync
              git pull origin master
            fi
          EOF

          echo "${{ secrets.ENV_FILE }}" | ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cat > ~/runsync/.env"

      - name: Deploy to Ubuntu VM
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/runsync

            # Ensure .env is present
            if [ ! -f .env ]; then
              echo "Missing .env file! Please upload it to the server."
              exit 1
            fi

            # Check if nginx is installed, install if not
            if ! command -v nginx &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y nginx
            fi

            # Check if Docker is installed, install if not
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y \
                ca-certificates \
                curl \
                gnupg

              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg

              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Ensure logs and db directories exist for persistence
            mkdir -p ./logs
            mkdir -p ./db

            # Start services with docker-compose
            sudo docker compose -f docker-compose.yml up -d --build
          EOF

      - name: Add configuration to nginx
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Check if nginx configuration doesn't already exist
            if [ ! -f /etc/nginx/sites-available/runsync ]; then
              echo "Setting up nginx configuration..."
              sudo apt-get update
              sudo apt-get install -y certbot python3-certbot-nginx
              sudo cp ~/runsync/nginx.conf /etc/nginx/sites-available/runsync
              sudo ln -s /etc/nginx/sites-available/runsync /etc/nginx/sites-enabled/
              sudo systemctl restart nginx
              sudo certbot delete --cert-name api.runsync.dev
              sudo certbot --nginx -d api.runsync.dev --agree-tos --email shubhamgrg04@gmail.com
              sudo systemctl restart nginx
              # Add crontab entry for certificate renewal if it doesn't exist
              if ! (crontab -l 2>/dev/null | grep -q "certbot renew"); then
                (crontab -l 2>/dev/null; echo "0 0 1 * * sudo certbot renew --quiet") | crontab -
                echo "Added automatic certificate renewal to crontab"
              fi
            fi
          EOF



